'''
006_콜라츠_추측.rb

지금까지 미결로 남아 있는 수학 문제 중에 콜라츠 추측(Collatz Conjecture)가 있습니다.

# 콜라츠 추측
- 자연수 n에 대해
 - n이 짝수인 경우, n을 2로 나눈다.
 - n이 홀수인 경우, n에 3을 콥해 1을 더한다.
이 계산을 반복하면 초기값이 어떤 수였더라도 반드시 1에 도달한다.
(1 > 4 > 2 > 1 과 같이 반복)

# 이 내용을 조금 바꾸어 초기값이 짝수면 맨 처음에만 n에 3을 곱하여 1을 더하는 것에서
시작하기로 하고 "맨 처음의 수"로 돌아가는 법을 생각해 봅시다.
4 > 13 > 40 > 20 > 10 > 5 > 16 > 8 > 4

# 문제
10000 이하의 짝수 중 위의 2나 4와 같이 처음의수로 돌아가는 수가 몇개 있는지 구하시오
'''

# 루프하고 있는지 확인
def is_loop(n)
  # 맨 처음에는 3을 곱하여 1을 더함
  check = n * 3 + 1
  # 1이 될 때까지 숫자를 변화시키는 작업 반복
  while check != 1 do
    check = check.even? ? check / 2 : check * 3 + 1
    return true if check == n
  end
  return false
end

# 2 ~ 10000 내에서 짝수를 확인
puts 2.step(10000, 2).count{|i|
  is_loop(i)
}
